

[
  
  
    
    
      {
        "title": "Why you should always F/LOSS before booting",
        "excerpt": "\n",
        "content": "\n\n      \n      Why you should always F/LOSS before booting\n      \n      A note on Free and Open Source Software on Software Freedom Day, 2019 : Sep 21, 2019\n      \n      Some definitions necessary to know (click to expand list items) \n\t\t\n\t\t\t \"Digital Restrictions Management\" (click to expand)\n\t\t\t\t Digital Restrictions Management is a term that is the result of software companies' practice of making the user feel restricted in using a service they have legitimately purchased, and in doing so, results in a product that is &lt;a href = https://www.defectivebydesign.org/what_is_drm_digital_restrictions_management&gt;\"defective by design\". &lt;/a&gt;\n\t\t\t\t\n\n\t\t\t\t\"Free Software or F/LOSS\"\n\t\t\t\t\t\n\t\t\t\t\t\tThe four essential criteria for free software are:\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t Freedom 0 - Freedom to run the program as you wish, for any purpose.\n\t\t\t\t\t\t\t  Freedom 1 - The freedom to study how the program works, and change it so it does your computing as you wish. Access to the source code is a precondition for this. \n\t\t\t\t\t\t\tFreedom 2 - The freedom to redistribute copies so you can help others\n\t\t\t\t\t\t\tFreedom 3-The freedom to distribute copies of your modified version to others. By doing this you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this.\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\tSoftware that does not meet this criteria falls under the category of \"nonfree\" and/or \"proprietary\" software. Software that does, is categorised as \"Free and Open Source Software\" or \"FOSS\"\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t \"Copyleft\"\n\t\t\t\t Copyleft is a kind of copyright license adopted by non-proprietary software makers that makes it simpler for\n\t\t\t\ttheir users to redistribute programs. Unlike software whose only distinguishing feature is that the \n\t\t\t\tsource code is in the public domain, copylefted \n\t\t\t\tsoftware imposes upon the users a responsibility to ensure that each copy that they make, modify or redistribute is \n\t\t\t\tdone so without imposing further costs. Significantly, some copyleft licenses, such as the \"GNU General Public License\" \n\t\t\t\talso prohibits such users, or in the case of software companies, \"redistributors\",\n\t\t\t\tto benefit from the mere act of redistribution, with or without changes, unless it is redistributed to the user\n\t\t\t\twith the freedom to further change or modify the program.   \n\t\t\n\t\n Introduction to FOSS \nSince the beginning of the advent of computers, right up till roughly around the introduction of the personal computer, users perused the source-code that came bundled with their hardware. To monetise on the source code itself, patentization and copyrighting of source code was implemented to enable corporations to bundle firmware with the software itself. In this blog post, I have collated only some of the data on the FOSS community’s contributions to software development in general. \n\nThe fact that the source-code in free software is free to read and edit, makes it a special use-case for software programmers looking to adopt FOSS-solutions as it offers a fuller understanding of how the program will work. While it is true that the term “Free Software” has it’s genesis in the community often given a negative connotation, namely, “hackers”, it is also true that ingenious solutions to the problems faced by computing systems today were/are developed mostly by the same community of FOSS programmers. Everything from the development of time-sharing systems to Operating Systems that run our phones have witnessed dedication from FOSS programmers.\n    \n    The idea of having software that users are free to run on their computers as they wish reflects on one \n    of the underlying ideals of the free software movement - that is, enabling a computer to have it’s fullest\n     functionality, and also that fairly computer-literate users should be able to choose the specific functionality\n      of the products that they use, not instead being bound by “digital handcuffs” in proprietary software. \n      \n The benefits of using FOSS       \n      \n       The benefits of using FOSS are multifold, especially considering the digital economy oriented policy outlooks that some\n       countries have implemented as the models for their economies, and as  computer literacy advances.\n        The availability of multiple specialised substitutes for the same task, has been highly beneficial. \n        This is relevant when looking at which GNU/Linux distributions (‘distros’) to install on your desktop, \n        which FOSS Operating System to choose for your phone, or likewise for any other FOSS-enabled service/application.\n        \n        What should perhaps draw more attention from companies and end users as well as energy conservationists is the fact that as proprietary code adds\n         millions of lines of code exponentially , which increases\n         the stress on compilers as well as naturally giving us slower devices, and as  \n         DRM drains their battery life,  the effect on the units of energy consumed in running the program is noticeable. \n         \n         FOSS on the other hand, works through non-employment of DRM to ensure lesser burden on the processing power of any system, \n         and also works for an environmentally aware user community with many applications made specifically for eco-friendly uses.\n\nFOSS works through constant development, according to most users because of it’s ability to self-regulate through a community of developers\n who share their knowledge in a collaborative environment. The FOSS community and, the \n Open Source initiative, both see a convergence of left-wing\n  and right-wing of the political spectrum. \n    \nSince this is where all roads meet for software enthusiasts, they also have a larger pool of programmers to work on\n applications running with the FOSS freedoms, and subsequently witness a rise in plugging cybersecurity vulnerabilities and debugging of errors.     \n    \n     \n    Another big implication for users is that FOSS-enabled programs eventually end up respecting privacy far more than any other proprietary company. With a low-cost product market, and source code that is open to inspect for any user of such program, the implications of such readily auditable code, are that a user may choose that service according to the data protection policy adopted, or rather enforced &lt;/b&gt; in the source code now freely available, in order to check whether it protects the users'  privacy.  In light of the EU’s GDPR requirements, and global consciousness rising about the ownership of sensitive data of computer users, such privacy-respecting implementations should only benefit the FOSS community. &lt;/p&gt; \n\nHowever, the FOSS community has regularly been hounded for it’s free, copyleft source code which, through the application of copyright law, has often times been made the mistress of proprietary software sold by tech giants. This proprietary software is then sold to users with expensive hardware, therefore effectively rendering the work of the FOSS programmers to waste. \n\n\n\nPROPRIETARY SOFTWARE’S IMPACT THROUGH ARM-TWISTING OF THE FOSS DEVELOPERS.    \n   \n    Microsoft’s “Embrace-Extend-Extinguish” policy as illustrated before a US Court (Comes v. Microsoft, 2007 - Expert Testimony of Ronald Alepin) is illustrative of the policy adopted by Microsoft towards FOSS software in general. In the words of the witness,  Ronald Alepin, himself,  Microsoft “…makes it essentially unavailable on a going-forward basis to the industry participants who were responsible for first developing the specifications and the standards.” \n\t\nThus, mere proprietary additions often operate in a restrictive manner towards the customer itself, as has been demonstrated by the increasing inroads of DRM in applications. What’s more is, this is done through minimal input to the development of the software. \n CONCLUSION \nWhile for some, the struggle for the FOSS community to survive may look like just an uneven match against big corporate running the proprietary software market, this battle takes scary proportions when, it is taken into consideration that the FOSS community is largely consisted of individuals, startups and smaller companies who pride themselves on innovation which forms the backbone of the devices we run our everyday tasks and businesses on. \n\nThese devices, which run FOSS are everything from Smartphones and desktop computers to set-top boxes and servers. In fact, it has been cited many times by its proponents as the backbone of our computer systems.     \n    \n\t Even the uses of free software in education are notable, it having been implemented in the public education system to teach programming/computer education while maintaining a low-cost system. \n\nOn the other hand, proprietary software which comes locked-in often comes with firmware, DRM and other cost-imposing measures which make these technologies far more inaccessible to be truly “liberating” as a cyberlibertarian would put it, or even make an ounce of social good. Also, in the face of malware like functionalities,  proprietary software by far fails to meet the standards that make the digital economy functional (privacy and cybersecurity). \n\nFurther information:\n  The Philosophy that drives GNU  \n      A highly entertaining talk by YouTuber Bryan Lunduke \n\t\n\n&lt;/details&gt;\n\n\n",
        "url": "/2019/09/21/FLOSS-post/"
      },
    
      {
        "title": "My dissertation for PGDEL",
        "excerpt": "Understanding compliance with Environmental Laws\n",
        "content": "The idea that ecological conservation is tied inextricably to humanity’s survival is now more\nprevalent than ever. With the sense of urgency, one would assume, would also come a sense\nof abeyance to nature‟s will, of community, and of public participation. To the contrary, one\ncan find many examples of non-conformity to the hallowed standards of Rule of Law, in as\nmuch as it binds citizens and authorities alike.\n\nThis leads one to be curious about what mechanism is put in place to deal with the question\nof non-compliance of laws that hold immense social value, given the context on which they\noperate. Is it just predicated on the moral values of people who must follow and manage these\nsystems, or is there something larger running behind the scenes of the many-headed hydra\nthat a system of laws may constitute? Does the system of laws that is formulated to deal with\nthese issues have a grounding in allied fields such as economics, environmental psychology\nand public spheres of activism? This is the question that is sought to be researched into in\nChapter 2, where some attention is also paid as to how these fields react.\n\n\n\nIn Chapter 3, the example of India as a country which implements its own compliance mechanisms, with its endemic problems towards implementation, and a large system of regulatory bodies, judicial bodies is taken and studied. Case studies from historical implementations of EIA regimes, and judiciary‟s response to the problem of implementation is gone into with a look at how effective it has all been in preventing the state of India‟s\nenvironment from declining.\nIn Chapter 4, some effort is taken to categorise and describe the various kinds of implementation mechanisms that international jurists and bodies formed under different\nMEAs have sought to innovate on. Since international law is a field with its own unique\ndiplomatic effects placing a hold on it, these limitations are recognised while studying the\nnegotiations that affect the formulation of compliance mechanisms. The study of this field is\ngone into detail with respect to two different framework conventions.\nChapter 5 is where the author offers some concluding thoughts on what the learnings from a\nmulti-faceted overview such as the present study point towards.\n\n\n\n    \n",
        "url": "/2021/08/15/dissertation/"
      },
    
      {
        "title": "My attempt at creating an accessible modification of the DotCommunist Manifesto",
        "excerpt": "The The Free Software Movement has theoretical roots that often need to be re-iterated, re-emphasised and what better way than to “re-distribute” in “modified” forms, something that is permissible only within the contours of “FREE INFORMATION”!!\n",
        "content": " Why I chose the dotCommunistManifesto \n\n\nThe Free Software Movement has theoretical roots that often need to be re-iterated, re-emphasised and what better way than to \"re-distribute\" in \"modified\" forms, something that is permissible only within the contours of \"FREE INFORMATION\"!!\n\n\n\nIf you read  the essay by Eben Moglen, you will notice that the author very deftly captures class analysis, media critique and the principles of Free information, of course, in this essay. \n\n\n\nThere are many ways that attention can be drawn to this statement by Eben Moglen, which, with all it's radical potential, certainly needs expression in more translations. Hence, I sincerely hope my contribution is one that helps render it more accessible. \n      \n\nLearning to use Sonic-Pi\n    \n\nThis was not that difficult, thanks to the years of computer science education at the high-school level which taught me about the importance of syntax. Also, due credit to all my music theory teachers over the years (both offline and online),\ndue to whom I could apply the concepts to this piece of work. Enough gloating about my \"skillsets\" :P \n\nOne thing I found super-helpful was the Sonic-Pi tutorial which comes pre-packaged along with the Application itself. However, certain key pieces of information such as multi-line comments were missing, for which I had to rely on le Olde friend DuckDuckGo.\n\nNext up, I realised that imagining a simple piece of sheet music where the quarter notes are 0.25th of a beat and sub-dividing further for triplets, rests, etc. could help create many a great rhythm. Some of this stuff was not possible for me to either \"draw\" or \"finger-drum\" into a traditional DAW grid. So, thanks to the creators of Sonic-Pi for making this work intuitively.\n\n \nIn particular, using the command \"pitch-stretch\" to manipulate a drum roll sample and then alter the slicing of the stretch algorithm was just one of the features I marvelled at.\n\nThere's a lot left to learn, no doubt, but I decided to publish my attempt at this juncture because I plan on using non-free software to record instruments over the loops I create on this program. Let's see how that goes? :)\n\n\n\n\n\n  \n\n\nClick here to access my repo containing the code buffers in Sonic-Pi\n\n",
        "url": "/2022/01/24/Sonic-Pi/"
      },
    
  
  
  
  {
    "title": "Sankalp 'Sankeiy' Srivastava's blog",
    "excerpt": "Find links and notes to my published papers, media productions, Github repos, and more.\n",
    "content": "Link to my BandCamp\n\nLink to my SoundCloud  /assets/logos/soundcloud.png\n\n\nLink to my LinkedIn  https://brand.linkedin.com/content/dam/brand/site/img/logo/logo-hero.png\n\n\nLink to my Twitter\n",
    "url": "/"
  },
  
  {
    "title": "Search",
    "excerpt": "Search for a page or post you’re looking for\n",
    "content": "\n  \n    Search term:\n    \n\n    \n        \n    \n  \n\n\n\n\n\n\nPlease enable JavaScript to use the search form.\n\n",
    "url": "/search/"
  }
  
]

